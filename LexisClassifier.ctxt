#BlueJ class context
comment0.params=td\ i
comment0.target=LexisClassifier(weka.core.Instances,\ int)
comment0.text=\r\n\ Defualt\ Constructor\ for\ objects\ of\ the\ LexisClassifier\ Classs.\r\n\ Uses\ the\ NaiveBeyesMultinomial\ classifier\ as\ a\ defualt\ and\ does\ no\ preprocessing\ \r\n\ (uses\ the\ noPreprocessor\ Preprocessor\ which\ simply\ returns\ the\ existing\ data\ \r\n\ @precondition\:\ the\ data\ has\ been\ preprocessed\ before\ it\ is\ added\ to\ the\ training\ set.\ \r\n\ Not\ this\ precondition\ requires\ that\ any\ isntance\ classified\ with\ this\ model\ must\ be\ processed\ \r\n\ in\ the\ same\ way\ (which\ is\ not\ gurented).\ \r\n\ @param\ \ training\ Data\ \ \r\n\ @param\ \ i\ index\ of\ the\ class\ attribute\ \r\n\ \r\n
comment1.params=td\ p
comment1.target=LexisClassifier(weka.core.Instances,\ Preprocessor)
comment1.text=\r\n\ This\ constructor\ takes\ raw\ instance\ object\ and\ a\ preprocesses\ object.\ \r\n\ The\ preprocesor\ object\ must\ provide\ a\ way\ to\ clean\ the\ data.\ IF\ the\ Lexis\ \r\n\ classifier\ is\ constructed\ in\ this\ way\ then\ the\ classify\ methods\ can\ be\ fed\ un-preprocessed\r\n\ lexis\ nexis\ instances\ \r\n\ \r\n\ \r\n
comment10.params=i
comment10.target=java.lang.String\ isCorrect(weka.core.Instance)
comment10.text=\r\n\ Return\ result\ of\ prediction.\ \r\n\ @return\ \ \ \ \ a\ string\ representign\ whether\ the\ prediction\ is\ correct.\ Either\ \r\n
comment11.params=seed\ folds
comment11.target=weka.core.Instances\ thresholdCurve(long,\ int)
comment11.text=\r\n\ ThresholdCurve\ returns\ an\ instance\ objedts\ with\ the\ results\ of\ the\ threshold\ curve\ for\ an\ evaluation.\ \r\n\r\n\ @param\ \ seed\ \r\n\ @param\ folds\ \r\n\ @return\ \ \ \ \ Instances\ \r\n
comment12.params=manualThreshold
comment12.target=void\ setThresholdManual(double)
comment12.text=\r\n\ Set\ the\ threshold\ of\ this\ classifier\ manually\ (according\ to\ input\ given\ by\ the\ user).\ \r\n\ \r\n\ @param\ manualThreshold\ the\ threshold\ to\ set\ for\ the\ probability\ \r\n\ @return\ an\ evaluation\ of\ the\ model\ when\ build\ with\ the\ new\ threshold\ \r\n
comment13.params=
comment13.target=void\ setThresholdRecall()
comment13.text=\r\n\ \ Optimizes\ for\ recall\ \r\n
comment14.params=
comment14.target=void\ setThresholdFstat()
comment14.text=\r\n\ \ Optimizes\ for\ fStatistic\ \r\n
comment15.params=i\ classNumber
comment15.target=double\ getDistributionForInstance(weka.core.Instance,\ int)
comment15.text=\r\n\ @param\ i\ \r\n\ @param\ classNumber\ \ \ the\ number\ of\ the\ class\ to\ get\ the\ probability\ for\ \r\n\ \ \ \ (if\ a\ binary\ class\ should\ be\ one\ or\ zero)\ \r\n
comment16.params=i
comment16.target=int\ isCorrectInt(weka.core.Instance)
comment16.text=\r\n\ ifCorrect\ returns\ a\ value\ for\ if\ the\ instnace\ is\ correct\:\ \r\n\ -2\:\ \=\ false\ positive\ \r\n\ -1\ \=\ false\ negative\ \r\n\ 0\ \=\ true\ negative\ \r\n\ 1\ \=\ true\ positive\ \r\n\r\n\ @param\ \ y\ \ \ a\ sample\ parameter\ for\ a\ method\r\n\ @return\ \ \ \ \ the\ sum\ of\ x\ and\ y\r\n
comment17.params=
comment17.target=weka.core.Instances\ getTD()
comment17.text=\r\n\ Getter\ method\ for\ the\ training\ data\ \r\n\r\n\ @return\ \ \ \ \ training\ data\ \r\n
comment18.params=args
comment18.target=void\ main(java.lang.String[])
comment2.params=td\ i\ c
comment2.target=LexisClassifier(weka.core.Instances,\ int,\ weka.classifiers.Classifier)
comment2.text=\r\n\ Constructs\ the\ a\ LexisClassifier\ object\ given\ any\ kind\ of\ classifier\r\n\ @\ param\ data\ the\ trainingData\ (must\ have\ existing\ class\ attribute).\ \ \r\n\ @\ param\ i\ the\ index\ \r\n\ @\ param\ Classifier\r\n
comment3.params=unclassified
comment3.target=java.lang.String\ classify(weka.core.Instance)
comment3.text=\r\n\ classifies\ one\ instance\ and\ returns\ the\ value\ of\ the\ predicted\ class\ attribute\ \r\n\ precondition\:\ must\ have\ the\ same\ attribute\ structure\ as\ the\ training\ data,\ but\ with\ missing\ values\ in\ the\ classIndex\ column\r\n\ side\ affect\:\ if\ the\ model\ is\ not\ updated,\ \r\n\ \ it\ will\ be\ updated\ accroding\ to\ the\ data\ in\ the\ "training\ data"\ parameter\ \r\n\ \r\n\ @param\ new\ instance\ to\ classify\ \r\n\ @return\ \ the\ class\ this\ instances\ is\ classified\ into\ \r\n
comment4.params=unlabeled
comment4.target=weka.core.Instances\ label(weka.core.Instances)
comment4.text=\r\n\ Given\ a\ set\ of\ instances,\ return\ a\ copy\ of\ the\ instances\ with\ the\ class\ \r\n\ attribute\ labeled\ according\ to\ this\ model\r\n\r\n\ @param\ \ the\ unclassified\ instances\r\n\ @return\ \ a\ copy\ with\ the\ class\ attribute\ filled\ in.\ \r\n
comment5.params=
comment5.target=weka.classifiers.Classifier\ getModel()
comment5.text=\r\n\ \ Returns\ the\ model\ with\ the\ current\ data\ \r\n\r\n\ @return\ \ \ \ \ the\ classifier\ \r\n
comment6.params=
comment6.target=void\ updateModel()
comment6.text=\r\n\ Builds\ the\ model\ using\ the\ current\ value\ of\ the\ trainingData\ field\ \r\n
comment7.params=seed\ folds
comment7.target=weka.classifiers.Evaluation\ crossVal(long,\ int)
comment7.text=\r\n\ Performs\ a\ 10\ Fold\ Cross\ Validation\ of\ this\ classifier\ object\ using\ all\ the\ availible\ training\ data\r\n\r\n\ @param\ \ fold\ >\=2\ the\ number\ of\ folds\ to\ generate\ \r\n\ @return\ \ \ \ \ the\ evaluation\ object,\ \r\n
comment8.params=two\ data
comment8.target=weka.core.Instances\ twoStepClassify(LexisClassifier,\ weka.core.Instances)
comment8.text=\r\n\ twoStepClassify\ takes\ a\ second\ classifier\ and\ unclassified\ instances,\ and\ classifies\ the\ data\ accordingly.\ \r\n\ @param\ two\ the\ second\ classifier\ \r\n\ @param\ data\ -the\ instances\ to\ be\ classified.\ \r\n
comment9.params=second\ i
comment9.target=java.lang.String\ twoStepClassify(LexisClassifier,\ weka.core.Instance)
comment9.text=\r\n\ Classifies\ a\ single\ instance\ according\ to\ both\ the\ is\ relevent\ and\ is\ factchecking\ model.\ Assumes\r\n\ that\ the\ classifier\ that\ it\ takes\ as\ its\ parameter\ is\ trained\ to\ classify\ the\ factchecking\ variable.\ \r\n\ \r\n\ @param\ second\ \ \ \ a\ nother\ classifier\ to\ classify\ the\ instances\ classified\ as\ one\ by\ THIS\ classifier\r\n\ @param\ i\ \ \ \ \ the\ instance\ to\ classify\ \r\n\ @return\ \ a\ string\ representing\ the\ class\ value.\ \r\n
numComments=19
