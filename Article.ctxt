#BlueJ class context
comment0.params=
comment0.target=Article()
comment0.text=\r\n\ Defualt\ Constructor\ for\ objects\ of\ class\ article\r\n
comment1.params=text
comment1.target=Article(java.lang.String)
comment1.text=\r\n\ Simple\ constructor\ for\ the\ article\ class\ used\ to\ build\ a\ lexis\ relation,\r\n\ does\ not\ classify\ the\ article,\ but\ simply\ extracts\ the\ information\ \r\n\ to\ make\ an\ Instance\ object\ from\ the\ an\ HTML\ string\ \r\n\ \r\n\ @param\ htmlText\ \ the\ html\ text\ of\ a\ single\ article\ \r\n\ @throws\ Exception\ is\ if\ the\ article\ text\ cannot\ be\ parsed\ \r\n
comment10.params=
comment10.target=java.lang.String\ getDate()
comment10.text=\r\n\ returns\ the\ articleDate\ \r\n
comment11.params=
comment11.target=java.lang.String\ getText()
comment11.text=\r\n\ returns\ the\ bodyText\ \r\n
comment12.params=
comment12.target=java.lang.String\ getClassValue()
comment12.text=\r\n\ Returns\ the\ classValue\r\n
comment13.params=
comment13.target=java.lang.String\ getHtmlFile()
comment2.params=model\ text\ header\ name\ hf
comment2.target=Article(LexisClassifier,\ java.lang.String,\ weka.core.Instances,\ java.lang.String,\ java.lang.String)
comment2.text=\r\n\ Constructor\ for\ the\ article\ used\ for\ the\ Classify\ articles\ method\ in\ the\ GUI.\ \r\n\ \r\n\ @param\ Preprocessor\ \ \ an\ object\ containing\ a\ method\ which\ can\ preprocess\ the\ instance\ for\ the\ model\r\n\ @param\ htmlText\ \ \ allready\ processed\ into\ a\ descreate\ article\ \r\n\ @param\ header\ \ \ \ an\ Instance\ object\ with\ the\ basic\ lexis\ header\ (can\ be\ have\ no\ instances)\r\n\ @param\ name\ \ the\ names\ of\ the\ file\ the\ article\ will\ be\ written\ to\ (must\ end\ in.txt)\ \r\n\ that\ will\ be\ used\ to\ format\ this\ article\ as\ an\ Instance\ \r\n\ handles\ convertException\ if\ the\ article\ cannot\ be\ classified,\ and\ sets\ the\ class\ value\ equal\ to\ missing.\ \r\n
comment3.params=
comment3.target=java.lang.String\ toARFFString()
comment3.text=\r\n\ Restuns\ a\ string\ representing\ the\ arff\ instance\ format\ \r\n
comment4.params=l
comment4.target=void\ writeArticle(java.lang.String)
comment4.text=\r\n\ note\:\ will\ write\ the\ file\ even\ if\ the\ class\ value\ is\ missing\ \r\n
comment5.params=l
comment5.target=org.jsoup.nodes.Document\ htmlDoc(java.lang.String)
comment6.params=id\ fromLocation
comment6.target=TOCEntry\ createTOCEntry(int,\ java.lang.String)
comment7.params=d
comment7.target=java.lang.String\ dateParse(java.lang.String)
comment7.text=\r\n\ Reads\ dates\ in\ long\ format\ and\ converts\ to\ yyyy-MM--dd\ form.\ \r\n\r\n\ @param\ \ date\ in\ MONTH\ DD,\ YYYY\ form\ \ \r\n\ @return\ \ YYYYY-MM-DD\ \ \r\n
comment8.params=line
comment8.target=int\ getNum(java.lang.String)
comment8.text=\r\n\ Extracts\ the\ FIRST\ integer\ from\ a\ string\r\n\r\n\ @param\ \ line-the\ original\ string\ \r\n\ @return\ \ \ \ \ the\ sum\ of\ x\ and\ y\r\n
comment9.params=
comment9.target=java.lang.String\ getTitle()
comment9.text=\r\n\ returns\ the\ title\ \r\n
numComments=14
