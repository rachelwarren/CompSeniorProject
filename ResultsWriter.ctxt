#BlueJ class context
comment0.params=
comment0.target=ResultsWriter()
comment0.text=\r\n\ Constructor\ for\ objects\ of\ class\ PrintResults,\ creates\ a\ DEFUALT\ file\ \r\n
comment1.params=fileName
comment1.target=ResultsWriter(java.lang.String)
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ ResultsWriter,\ creates\ a\ file\ specified\ by\ the\ user\ \r\n\ @param\ filename\ \r\n\ \r\n\ throws\ IOException\ \r\n
comment10.params=rawData\ stwv\ names\ description
comment10.target=void\ printSTWVTable(weka.core.Instances,\ weka.filters.unsupervised.attribute.StringToWordVector[],\ java.lang.String[],\ java.lang.String[])
comment10.text=\r\n\ Writes\ a\ table\ of\ models\ constructed\ using\ a\ different\ string\ to\ word\ vector\ \r\n\ \r\n\ @param\ rawData\ the\ lexis\ data\ processed\ \r\n\ @param\ stwv\ \ \ an\ array\ of\ different\ vectors\ to\ use\ \r\n\ @param\ names\ the\ names\ of\ the\ models\ \r\n\ @param\ description\ \ \ test\ comment\ about\ each\ model\ \r\n\ \r\n\ @throws\ Exception\ if\ the\ classifier\ cannot\ be\ built\ \r\n
comment11.params=rawData\ repArray\ stwv\ names\ description
comment11.target=void\ printTitleTable(weka.core.Instances,\ int[],\ weka.filters.unsupervised.attribute.StringToWordVector,\ java.lang.String[],\ java.lang.String[])
comment11.text=\r\n\ Prints\ a\ table\ of\ evaluations\ for\ models\ where\ the\ title\ is\ weighted\ different\ amounts\ \r\n@param\ rawData\r\n\ param\ repArray\ a\ list\ of\ the\ number\ of\ times\ to\ repeat\ the\ title\ for\ each\ tests\ \r\n\ @param\ the\ stwv\ to\ apply\ \r\n\ @param\ names\r\n\ @param\ description\r\n\ precondition\:\ |names|\ \=\ |description|\r\n\ \r\n\ @throws\ Exception\ \ \ \ weka\ exception\ if\ the\ classifier\ cannot\ be\ built\ \r\n
comment2.params=bw
comment2.target=ResultsWriter(java.io.BufferedWriter)
comment2.text=\r\n\ Constructor\ for\ objects\ of\ class\ ResultsWriter,\ takes\ an\ existing\ bufferwriter\ \r\n
comment3.params=names\ description
comment3.target=void\ modelKey(java.lang.String[],\ java.lang.String[])
comment3.text=\r\n\ modelKey\ prints\ the\ names\ and\ desciptions\ of\ a\ list\ of\ models\ \r\n\ \r\n@param\ names\ a\ list\ of\ the\ names\ of\ the\ models\ \r\n@param\ description-\ a\ list\ of\ the\ description\ of\ the\ model\ \r\n
comment4.params=modelList\ names
comment4.target=void\ writeEvaluations(java.util.ArrayList,\ java.lang.String[])
comment4.text=\r\n\ \ writeEvaluations\ prints\ out\ the\ evaluation\ matrix\ for\ models\ made\ with\ several\ different\ variaties\ of\ string\ to\ word\ vectors\r\n\ The\ parameter\ is\ the\ basic\ lexis\ data.\ \r\n\ @param\ String[]\ names\ \r\n\ @param\ modelList\r\n\ \ \ \ \ \r\n\ @throws\ \ \ weka\ exception\ is\ thrown\ if\ the\ classifier\ cannot\ be\ built\ \ \ \r\n
comment5.params=tempA\ tempB
comment5.target=void\ writeLexNums(weka.core.Instances,\ weka.core.Instances)
comment5.text=\r\n\ Builds\ a\ classifier\ on\ a\ randomly\ selected\ 50%\ of\ the\ articles\ for\ each\ of\ the\ two\ data\ sets\ given\ as\ parameters,\ \r\n\ then\ clssifies\ each\ of\ the\ remaining\ instances\ in\ the\ dataSet\ using\ that\ classifier\ and\ returns\ the\ lexis\ numbers\ of\ \r\n\ training\ set,\ the\ false\ positives,\ false\ negatives,\ and\ the\ correctly\ classified\ articles.\ \r\n\ \r\n\ Precondition\:\ string\ to\ word\ vector\ has\ already\ been\ applied\ to\ the\ two\ Instance\ objects\r\n\ \r\n\ \r\n\ @param\ tempA\ -\ the\ data\ cleaned\ for\ the\ analysis\ of\ the\ first\ model,\ the\ is\ relvent\ variable\ \r\n\ @param\ tempB\ -\ the\ data\ cleaned\ for\ the\ analysis\ of\ the\ second\ model,\ the\ is\ factchecking\ variable\ \r\n\ \ \ \ \ \r\n\ \ @throws\ \ \ weka\ exception\ is\ thrown\ if\ the\ classifier\ cannot\ be\ built\ \ \ \ \ \r\n\ \r\n
comment6.params=modelList\ names\ x
comment6.target=void\ attributeInfo(java.util.ArrayList,\ java.lang.String[],\ int)
comment6.text=\r\n\ AttributeInfo\:\ prints\ an\ ordered\ array\ list\ of\ the\ attributes\ that\ are\ the\ highest\ predictor\ of\ the\ class\ attribute\ for\ \r\n\ each\ item\ in\ an\ arraylist\ of\ models.\ \r\n\ The\ result\ is\ a\ csv\ which\ can\ be\ interpreted\ as\ a\ matrix\ of\ the\ form\:\ \r\n\ \ \ ,model1\ ,\ \ \ \ ,\ \ \ \ \ \ \ Model2\ .................\ \r\n\ rank\ ,gainRatio,\ attName,\ gainRatio,\ attName\ ......\r\n\ \ 0,\ x\ \ \ \ \ \ \ \ \ \ name0\ \ \ \ \ \ y\ \ \ \ \ \ \ \ \ name\ \r\n\ \ 1,\ x'\ \ \ \ \ \ \ \ \ name1\r\n\ \ ...\r\n\ \ \r\n\ \ \r\n\ @param\ modelList\ a\ list\ Instances\ objects\ representing\ different\ ways\ of\ preprocessing\ the\ data\ \r\n\ @param\ name\ \ names\ of\ the\ models\ \r\n\ @param\ x\ -\ the\ number\ of\ attributes\ to\ print\ \ \r\n\ \ \ \ \ \ \r\n\ @throws\ \ \ weka\ exception\ is\ thrown\ if\ the\ classifier\ cannot\ be\ built\ \ \ \r\n
comment7.params=s
comment7.target=void\ writeLine(java.lang.String)
comment7.text=\r\n\ Writes\ a\ single\ line\ using\ the\ buffer\ writer\ in\ the\ field\ "w"\ \r\n\ @param\ s\ the\ string\ to\ write\ \r\n
comment8.params=
comment8.target=void\ closeW()
comment8.text=\r\n\ Close\ the\ bufferwriter\ associated\ with\ this\ ResultsWriter\r\n
comment9.params=
comment9.target=void\ insertBreak()
comment9.text=\r\n\ insert\ a\ line\ break\ and\ a\ line\ t\r\n
numComments=12
